% Function to implement motion planning using gradient descent algorithm
% Arguments for motionplan function:
% q0 = column vector of initial actual joint angles
% q2 = column vector of final joint angles
% t1 = start time of picewise cubic polynomial
% t2 = finish time of picewise cubic polynomial
% myrobot = the robot structure generated by mypuma560 function
% obs = obstacle structure
% tol = tolerance used to terminate the algorithm
% Return value for motion plan function:
% qref = piecewise cubic polynomial

function qref = motionplan(q0, q2, t1, t2, myrobot, obs, tol)
    % Initialize first waypoint
    q(1,:) = q0';
    
    % Set alpha (not too large, to avoid oscillations around final position)
    alpha_att = 0.01;
    alpha_rep = 0.01;
    
    % Gradient descent algorithm
    k = 1; % Index for waypoints initialized
    while(norm(q(end,1:5)-q2(1:5)) >= tol)
        % Get contribution of attractive component
        q(k+1,:) = q(k,:) + alpha_att * att(q(k,:), q2, myrobot);
        disp(norm(q(end,1:5)-q2(1:5)))
        % Get contribution of repulsive component for each obstacle
        for i = 1:length(obs)
            q(k+1,:) = q(k+1,:) + alpha_rep * rep(q(k,:), myrobot, obs{i});
        end 
        %disp(q(k,:))
        k = k + 1;
        
     %   norm(q(end,1:5)-q2(1:5)) % For debugging purposes
    end
    
    % Set q(6) via linspace since it is unaffected by att and rep
    q(:,6) = linspace(q0(6), q2(6), size(q,1));
    
    % Create the cubic spline qref
    t = linspace(t1,t2,size(q,1));
    qref = spline(t,q');
    
end
