% Arguments for inverse function:
% H = 4*4 homogeneous transformation matrix containing desired position and
% orientation of end effector
% myrobot = the robot structure generated by mypuma560 function

% Return value of inverse function:
% q = 1*6 vector of joint angles solving the IKP

function q = inverse(H, myrobot)
    
    % Declare DH parameters used in computations
    d1 = myrobot.links(1).d;
    d2 = myrobot.links(2).d;
    d4 = myrobot.links(4).d;
    d6 = myrobot.links(6).d;
    a2 = myrobot.links(2).a;

    % Initialize q vector with zeros
    q = zeros(1, 6);
    
    % Get the coordinates for the wrist center with respect to Frame 0
    x_C = H(1, 4) - H(1, 3) * d6;
    y_C = H(2, 4) - H(2, 3) * d6;
    z_C = H(3, 4) - H(3, 3) * d6;
    
    % Compute theta 1
    q(1, 1) = atan2(y_C, x_C) - atan2(-d2, sqrt((x_C^2) + (y_C^2) - (d2^2)));

    % Compute theta 3
    D = ((x_C^2) + (y_C^2) - (d2^2) + (z_C - d1)^2 - (a2^2) - (d4)^2) / (2 * a2 * d4);
    q(1, 3) = atan2(D, real(sqrt(1 - (D^2))));
    
    % Compute theta 2
    q(1, 2) = atan2(z_C - d1, sqrt((x_C^2) + (y_C^2) - (d2^2))) - atan2(-d4 * cos(q(1, 3)), a2 + d4 * sin(q(1, 3)));
    
    % Compute the Homogeneous Matrix of Frame 3 with respect to Frame 0
    % using forward kinematics
    for i = 1:3
        % Get DH parameters for link i
        theta = q(i);
        link = myrobot.links(i);
        d = link.d;
        a = link.a;
        alpha = link.alpha;
        
        % Construct homogeneous matrix for Frame i with respect to Frame
        % i-1
        homogeneous_matrix = [ cos(theta) -sin(theta)*cos(alpha) sin(theta)*sin(alpha) a*cos(theta) ; 
                        sin(theta) cos(theta)*cos(alpha) -cos(theta)*sin(alpha) a*sin(theta) ;
                        0 sin(alpha) cos(alpha) d ;
                        0 0 0 1 ];
        if i == 1
           % Initialize H_3to0
           H_3to0 = homogeneous_matrix;
        else
            % Update H_3to0 matrix by premultiplying with the homogenous matrix for
            % Frame i with respect to Frame i-1
            H_3to0 = H_3to0 * homogeneous_matrix;
        end
        
    end
    
    % Compute the Rotation Matrix from Frame 6 to Frame 3
    R_6to3 = (H_3to0(1:3, 1:3).') * H(1:3, 1:3);
    
    % Compute theta 4
    q(1, 4) = atan2(R_6to3(2, 3), R_6to3(1, 3));
    
    % Compute theta 5
    q(1, 5) = atan2(sqrt(1 - (R_6to3(3, 3))^2), R_6to3(3, 3));
    
    % Compute theta 6
    q(1, 6) = atan2(R_6to3(3, 2), -R_6to3(3, 1));

end